<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
      http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing
        infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model -->
    <mvc:annotation-driven />

    <mvc:interceptors>
        <!-- Inject the UserInfo into the current context -->
        <bean id="userInfoInterceptor" class="org.mitre.openid.connect.web.UserInfoInterceptor" />
    </mvc:interceptors>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources directory -->
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources
        in the /WEB-INF/views directory -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <context:component-scan base-package="org.mitre.web" />

    <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager"/>

    <security:http auto-config="false" use-expressions="true"
                   disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint"
                   pattern="/**">

        <security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />

        <security:logout />

    </security:http>

    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/openid_connect_login" />
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="openIdConnectAuthenticationProvider" />
    </security:authentication-manager>

    <bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider" />

    <!--
      -
      - The authentication filter
      -
      -->
    <bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager" />

        <property name="issuerService" ref="hybridIssuerService" />
        <property name="serverConfigurationService" ref="dynamicServerConfigurationService" />
        <property name="clientConfigurationService" ref="staticClientConfigurationService" />
        <property name="authRequestOptionsService" ref="staticAuthRequestOptionsService" />
        <property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder" />

    </bean>

    <!--
      -
      -    Issuer Services: Determine which identity provider issuer is used.
      -
      -->

    <!--
        Hybrid issuer service. If an issuer is passed in directly with the "iss" parameter, it will use that. If not, it will
        look for an "identifier" parameter to do Webfinger discovery on that. Failing that, it will redirect to the login
        page URL.
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.HybridIssuerService" id="hybridIssuerService">
        <property name="loginPageUrl" value="login" />
        <property name="forceHttps" value="false" /> <!-- this default property forces the webfinger issuer URL to be HTTPS, turn off for development work -->
    </bean>

    <!--
      -
      - Server configuration: determines the parameters and URLs of the server to talk to.
      -
      -->

    <!--
        Dynamic server configuration, fetches the server's information using OIDC Discovery.
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.DynamicServerConfigurationService" id="dynamicServerConfigurationService" />

    <!--
      -
      -    Client Configuration: Determine which client identifier and credentials are used.
      -
      -->

    <!--
        Static Client Configuration. Configures a client statically by storing configuration on a per-issuer basis.
    -->
    <bean
            class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService"
            id="staticClientConfigurationService">
        <property name="clients">
            <map>
                <entry key="https://connect.openathens.net">
                    <bean class="org.mitre.oauth2.model.RegisteredClient">
                        <property name="clientId"
                                  value="<insert_your_clientId_here>"/>
                        <property name="clientSecret" value="<insert_your_clientSecret_here>"/>
                        <property name="scope">
                            <set value-type="java.lang.String">
                                <value>openid</value>
                            </set>
                        </property>
                        <property name="tokenEndpointAuthMethod" value="SECRET_BASIC" />
                        <property name="redirectUris">
                            <set>
                                <value>http://localhost:8080/openid_connect_login</value>
                            </set>
                        </property>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <!--
      -
      -    Auth request options service: returns the optional components of the request
      -
      -->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService" />

    <!--
      -
      - Authorization URL Builders: create the URL to redirect the user to for authorization.
      -
      -->

    <!--
        Plain authorization request builder, puts all options as query parameters on the GET request
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />

    <!--
     -
     - Utility beans for the above classes
     -
     -->

    <!--
        This service fetches and caches JWK sets from URLs.
    -->

    <bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />

</beans>